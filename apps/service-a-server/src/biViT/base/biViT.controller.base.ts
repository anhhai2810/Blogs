/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BIViTService } from "../biViT.service";
import { BIViTCreateInput } from "./BIViTCreateInput";
import { BIViT } from "./BIViT";
import { BIViTFindManyArgs } from "./BIViTFindManyArgs";
import { BIViTWhereUniqueInput } from "./BIViTWhereUniqueInput";
import { BIViTUpdateInput } from "./BIViTUpdateInput";
import { PostWithVoteCountDto } from "../../postModule/PostWithVoteCountDto";

export class BIViTControllerBase {
  constructor(protected readonly service: BIViTService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BIViT })
  async createBIViT(@common.Body() data: BIViTCreateInput): Promise<BIViT> {
    return await this.service.createBiViT({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BIViT] })
  @ApiNestedQuery(BIViTFindManyArgs)
  async biViTS(@common.Req() request: Request): Promise<BIViT[]> {
    const args = plainToClass(BIViTFindManyArgs, request.query);
    return this.service.biViTS({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BIViT })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async biViT(
    @common.Param() params: BIViTWhereUniqueInput
  ): Promise<BIViT | null> {
    const result = await this.service.biViT({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BIViT })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBIViT(
    @common.Param() params: BIViTWhereUniqueInput,
    @common.Body() data: BIViTUpdateInput
  ): Promise<BIViT | null> {
    try {
      return await this.service.updateBiViT({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BIViT })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBIViT(
    @common.Param() params: BIViTWhereUniqueInput
  ): Promise<BIViT | null> {
    try {
      return await this.service.deleteBiViT({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/posts-with-vote-count")
  @swagger.ApiOkResponse({
    type: PostWithVoteCountDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetPostsWithVoteCount(
    @common.Body()
    body: string
  ): Promise<PostWithVoteCountDto[]> {
    return this.service.GetPostsWithVoteCount(body);
  }
}
