/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BIViT as PrismaBIViT } from "@prisma/client";
import { PostWithVoteCountDto } from "../../postModule/PostWithVoteCountDto";

export class BIViTServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BIViTCountArgs, "select">): Promise<number> {
    return this.prisma.biViT.count(args);
  }

  async biViTS(args: Prisma.BIViTFindManyArgs): Promise<PrismaBIViT[]> {
    return this.prisma.biViT.findMany(args);
  }
  async biViT(args: Prisma.BIViTFindUniqueArgs): Promise<PrismaBIViT | null> {
    return this.prisma.biViT.findUnique(args);
  }
  async createBIViT(args: Prisma.BIViTCreateArgs): Promise<PrismaBIViT> {
    return this.prisma.biViT.create(args);
  }
  async updateBIViT(args: Prisma.BIViTUpdateArgs): Promise<PrismaBIViT> {
    return this.prisma.biViT.update(args);
  }
  async deleteBIViT(args: Prisma.BIViTDeleteArgs): Promise<PrismaBIViT> {
    return this.prisma.biViT.delete(args);
  }
  async GetPostsWithVoteCount(args: string): Promise<PostWithVoteCountDto[]> {
    throw new Error("Not implemented");
  }
}
