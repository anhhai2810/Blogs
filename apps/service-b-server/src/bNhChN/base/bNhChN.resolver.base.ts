/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BNhChN } from "./BNhChN";
import { BNhChNCountArgs } from "./BNhChNCountArgs";
import { BNhChNFindManyArgs } from "./BNhChNFindManyArgs";
import { BNhChNFindUniqueArgs } from "./BNhChNFindUniqueArgs";
import { CreateBNhChNArgs } from "./CreateBNhChNArgs";
import { UpdateBNhChNArgs } from "./UpdateBNhChNArgs";
import { DeleteBNhChNArgs } from "./DeleteBNhChNArgs";
import { BNhChNService } from "../bNhChN.service";
@graphql.Resolver(() => BNhChN)
export class BNhChNResolverBase {
  constructor(protected readonly service: BNhChNService) {}

  async _bNhChNSMeta(
    @graphql.Args() args: BNhChNCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BNhChN])
  async bNhChNS(@graphql.Args() args: BNhChNFindManyArgs): Promise<BNhChN[]> {
    return this.service.bNhChNS(args);
  }

  @graphql.Query(() => BNhChN, { nullable: true })
  async bNhChN(
    @graphql.Args() args: BNhChNFindUniqueArgs
  ): Promise<BNhChN | null> {
    const result = await this.service.bNhChN(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BNhChN)
  async createBNhChN(@graphql.Args() args: CreateBNhChNArgs): Promise<BNhChN> {
    return await this.service.createBNhChN({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BNhChN)
  async updateBNhChN(
    @graphql.Args() args: UpdateBNhChNArgs
  ): Promise<BNhChN | null> {
    try {
      return await this.service.updateBNhChN({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BNhChN)
  async deleteBNhChN(
    @graphql.Args() args: DeleteBNhChNArgs
  ): Promise<BNhChN | null> {
    try {
      return await this.service.deleteBNhChN(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
