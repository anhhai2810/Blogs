/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BNhChNService } from "../bNhChN.service";
import { BNhChNCreateInput } from "./BNhChNCreateInput";
import { BNhChN } from "./BNhChN";
import { BNhChNFindManyArgs } from "./BNhChNFindManyArgs";
import { BNhChNWhereUniqueInput } from "./BNhChNWhereUniqueInput";
import { BNhChNUpdateInput } from "./BNhChNUpdateInput";

export class BNhChNControllerBase {
  constructor(protected readonly service: BNhChNService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BNhChN })
  async createBNhChN(@common.Body() data: BNhChNCreateInput): Promise<BNhChN> {
    return await this.service.createBNhChN({
      data: data,
      select: {
        createdAt: true,
        id: true,
        postId: true,
        updatedAt: true,
        voteCount: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BNhChN] })
  @ApiNestedQuery(BNhChNFindManyArgs)
  async bNhChNS(@common.Req() request: Request): Promise<BNhChN[]> {
    const args = plainToClass(BNhChNFindManyArgs, request.query);
    return this.service.bNhChNS({
      ...args,
      select: {
        createdAt: true,
        id: true,
        postId: true,
        updatedAt: true,
        voteCount: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BNhChN })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bNhChN(
    @common.Param() params: BNhChNWhereUniqueInput
  ): Promise<BNhChN | null> {
    const result = await this.service.bNhChN({
      where: params,
      select: {
        createdAt: true,
        id: true,
        postId: true,
        updatedAt: true,
        voteCount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BNhChN })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBNhChN(
    @common.Param() params: BNhChNWhereUniqueInput,
    @common.Body() data: BNhChNUpdateInput
  ): Promise<BNhChN | null> {
    try {
      return await this.service.updateBNhChN({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          postId: true,
          updatedAt: true,
          voteCount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BNhChN })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBNhChN(
    @common.Param() params: BNhChNWhereUniqueInput
  ): Promise<BNhChN | null> {
    try {
      return await this.service.deleteBNhChN({
        where: params,
        select: {
          createdAt: true,
          id: true,
          postId: true,
          updatedAt: true,
          voteCount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
